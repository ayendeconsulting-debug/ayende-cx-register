// Ayende-CX Payment Register System - Database Schema
// This schema supports POS operations, CRM integration, and loyalty programs

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================

enum UserRole {
  SUPER_ADMIN    // Full system access
  ADMIN          // Business owner/manager
  CASHIER        // POS operator
  INVENTORY_MANAGER // Stock management only
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  username      String       @unique
  passwordHash  String
  firstName     String
  lastName      String
  role          UserRole     @default(CASHIER)
  isActive      Boolean      @default(true)
  lastLogin     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  transactions  Transaction[]
  shifts        Shift[]
  auditLogs     AuditLog[]
  
  @@index([email])
  @@index([username])
}

// ============================================
// CUSTOMER MANAGEMENT (CRM)
// ============================================

model Customer {
  id              String       @id @default(uuid())
  firstName       String
  lastName        String
  email           String?      @unique
  phone           String?      @unique
  dateOfBirth     DateTime?
  
  // Loyalty Program
  loyaltyPoints   Int          @default(0)
  totalSpent      Decimal      @default(0) @db.Decimal(10, 2)
  visitCount      Int          @default(0)
  lastVisit       DateTime?
  memberSince     DateTime     @default(now())
  loyaltyTier     LoyaltyTier  @default(BRONZE)
  
  // Contact & Preferences
  address         String?
  city            String?
  state           String?
  zipCode         String?
  marketingOptIn  Boolean      @default(false)
  
  // Metadata
  isActive        Boolean      @default(true)
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  transactions    Transaction[]
  loyaltyHistory  LoyaltyTransaction[]
  
  @@index([email])
  @@index([phone])
  @@index([loyaltyTier])
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

// ============================================
// PRODUCT CATALOG & INVENTORY
// ============================================

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@index([name])
}

model Product {
  id              String    @id @default(uuid())
  sku             String    @unique
  name            String
  description     String?
  categoryId      String
  
  // Pricing
  price           Decimal   @db.Decimal(10, 2)
  costPrice       Decimal?  @db.Decimal(10, 2)
  
  // Inventory
  stockQuantity   Int       @default(0)
  lowStockAlert   Int       @default(10)
  unit            String    @default("unit") // unit, kg, lb, etc
  
  // Product Details
  barcode         String?   @unique
  imageUrl        String?
  isActive        Boolean   @default(true)
  isTaxable       Boolean   @default(true)
  
  // Loyalty Integration
  loyaltyPoints   Int       @default(0) // Points earned per purchase
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  category        Category  @relation(fields: [categoryId], references: [id])
  transactionItems TransactionItem[]
  stockMovements  StockMovement[]
  
  @@index([sku])
  @@index([barcode])
  @@index([categoryId])
  @@index([name])
}

// ============================================
// STOCK MANAGEMENT
// ============================================

enum MovementType {
  PURCHASE      // Stock in
  SALE          // Stock out
  ADJUSTMENT    // Manual correction
  RETURN        // Customer return
  DAMAGE        // Damaged goods
  TRANSFER      // Between locations
}

model StockMovement {
  id            String       @id @default(uuid())
  productId     String
  movementType  MovementType
  quantity      Int
  previousStock Int
  newStock      Int
  reference     String?      // Invoice/order number
  notes         String?
  createdAt     DateTime     @default(now())
  
  // Relations
  product       Product      @relation(fields: [productId], references: [id])
  
  @@index([productId])
  @@index([createdAt])
}

// ============================================
// TRANSACTIONS (POS)
// ============================================

enum TransactionStatus {
  PENDING
  COMPLETED
  VOID
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
  LOYALTY_POINTS
  SPLIT // Multiple payment methods
}

model Transaction {
  id                String            @id @default(uuid())
  transactionNumber String            @unique // Human-readable: TXN-20250101-001
  
  // Customer & Staff
  customerId        String?
  userId            String            // Cashier who processed
  
  // Financial Details
  subtotal          Decimal           @db.Decimal(10, 2)
  taxAmount         Decimal           @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal           @default(0) @db.Decimal(10, 2)
  total             Decimal           @db.Decimal(10, 2)
  
  // Payment
  paymentMethod     PaymentMethod
  amountPaid        Decimal           @db.Decimal(10, 2)
  changeGiven       Decimal           @default(0) @db.Decimal(10, 2)
  
  // Loyalty
  loyaltyPointsEarned Int             @default(0)
  loyaltyPointsRedeemed Int           @default(0)
  
  // Transaction Status
  status            TransactionStatus @default(COMPLETED)
  voidReason        String?
  refundedAt        DateTime?
  
  // Shift tracking
  shiftId           String?
  
  // Metadata
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  customer          Customer?         @relation(fields: [customerId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  shift             Shift?            @relation(fields: [shiftId], references: [id])
  items             TransactionItem[]
  payments          PaymentDetail[]
  
  @@index([transactionNumber])
  @@index([customerId])
  @@index([userId])
  @@index([createdAt])
  @@index([status])
}

model TransactionItem {
  id              String      @id @default(uuid())
  transactionId   String
  productId       String
  
  // Product details at time of sale (for historical accuracy)
  productName     String
  sku             String
  quantity        Int
  unitPrice       Decimal     @db.Decimal(10, 2)
  subtotal        Decimal     @db.Decimal(10, 2)
  discount        Decimal     @default(0) @db.Decimal(10, 2)
  tax             Decimal     @default(0) @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  
  createdAt       DateTime    @default(now())
  
  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product         Product     @relation(fields: [productId], references: [id])
  
  @@index([transactionId])
  @@index([productId])
}

// For split payments
model PaymentDetail {
  id              String        @id @default(uuid())
  transactionId   String
  paymentMethod   PaymentMethod
  amount          Decimal       @db.Decimal(10, 2)
  reference       String?       // Card last 4 digits, mobile money ref, etc
  createdAt       DateTime      @default(now())
  
  // Relations
  transaction     Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  @@index([transactionId])
}

// ============================================
// LOYALTY PROGRAM
// ============================================

enum LoyaltyTransactionType {
  EARNED      // Points earned from purchase
  REDEEMED    // Points used for discount
  EXPIRED     // Points expired
  ADJUSTED    // Manual adjustment
  BONUS       // Promotional bonus
}

model LoyaltyTransaction {
  id              String                  @id @default(uuid())
  customerId      String
  type            LoyaltyTransactionType
  points          Int                     // Positive for earn, negative for redeem
  transactionId   String?                 // Link to POS transaction if applicable
  description     String
  expiresAt       DateTime?               // Points expiration
  createdAt       DateTime                @default(now())
  
  // Relations
  customer        Customer                @relation(fields: [customerId], references: [id])
  
  @@index([customerId])
  @@index([createdAt])
}

// ============================================
// SHIFT MANAGEMENT (Cash Drawer)
// ============================================

enum ShiftStatus {
  OPEN
  CLOSED
}

model Shift {
  id              String        @id @default(uuid())
  userId          String
  shiftNumber     String        @unique // SHIFT-20250101-001
  
  // Cash Management
  openingCash     Decimal       @db.Decimal(10, 2)
  closingCash     Decimal?      @db.Decimal(10, 2)
  expectedCash    Decimal?      @db.Decimal(10, 2)
  variance        Decimal?      @db.Decimal(10, 2) // Difference between expected and actual
  
  // Shift Details
  status          ShiftStatus   @default(OPEN)
  openedAt        DateTime      @default(now())
  closedAt        DateTime?
  notes           String?
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  transactions    Transaction[]
  
  @@index([userId])
  @@index([status])
  @@index([openedAt])
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

model SystemConfig {
  id                    String   @id @default(uuid())
  key                   String   @unique
  value                 String
  description           String?
  updatedAt             DateTime @updatedAt
  
  @@index([key])
}

// Configuration for loyalty program rules
// Example keys:
// - loyalty_points_per_dollar: "10"
// - loyalty_redemption_rate: "100" (100 points = $1)
// - tax_rate: "0.15"
// - currency: "USD"
// - business_name: "My Store"

// ============================================
// AUDIT LOG
// ============================================

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VOID_TRANSACTION
  REFUND
  STOCK_ADJUSTMENT
}

model AuditLog {
  id          String      @id @default(uuid())
  userId      String?
  action      AuditAction
  entityType  String      // User, Product, Transaction, etc
  entityId    String?
  changes     String?     @db.Text // JSON string of changes
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())
  
  // Relations
  user        User?       @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([entityType])
  @@index([createdAt])
}
